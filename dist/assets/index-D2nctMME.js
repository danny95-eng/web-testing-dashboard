(function(){const x=document.createElement("link").relList;if(x&&x.supports&&x.supports("modulepreload"))return;for(const u of document.querySelectorAll('link[rel="modulepreload"]'))E(u);new MutationObserver(u=>{for(const p of u)if(p.type==="childList")for(const I of p.addedNodes)I.tagName==="LINK"&&I.rel==="modulepreload"&&E(I)}).observe(document,{childList:!0,subtree:!0});function S(u){const p={};return u.integrity&&(p.integrity=u.integrity),u.referrerPolicy&&(p.referrerPolicy=u.referrerPolicy),u.crossOrigin==="use-credentials"?p.credentials="include":u.crossOrigin==="anonymous"?p.credentials="omit":p.credentials="same-origin",p}function E(u){if(u.ep)return;u.ep=!0;const p=S(u);fetch(u.href,p)}})();console.log("[Dashboard] Script starting");console.log("[Dashboard] main.js loaded");(function(){var J,W,U;let y=null,x=null,S=null,E=null;function u(t){document.querySelectorAll(".tab-content").forEach(n=>{n.classList.remove("active")}),document.querySelectorAll(".tab-btn").forEach(n=>{n.classList.remove("text-potent-purple","border-b-2","border-potent-purple","bg-fearless-fuchsia/10"),n.classList.add("text-gray-600")}),document.getElementById(t+"-tab").classList.add("active");const e=document.querySelector(`[data-tab="${t}"]`);e&&(e.classList.add("text-potent-purple","border-b-2","border-potent-purple","bg-fearless-fuchsia/10"),e.classList.remove("text-gray-600"))}function p(t=null){y=t;const e=document.getElementById("idea-modal"),n=document.getElementById("idea-modal-title");if(t){n.textContent="Edit Test Idea";const s=A(t);document.getElementById("idea-name").value=s.name||"",document.getElementById("idea-element").value=s.element||"",document.getElementById("idea-reasoning").value=s.reasoning||"",document.getElementById("idea-howto").value=s.howto||"",document.getElementById("idea-success").value=s.success||"",window.pendingIdeaScreenshots=s.screenshots||[]}else{n.textContent="Add New Test Idea";const s=document.getElementById("idea-form");s&&s.reset(),window.pendingIdeaScreenshots=[]}e==null||e.classList.add("active")}function I(){var t;(t=document.getElementById("idea-modal"))==null||t.classList.remove("active"),y=null}function L(t=null){x=t;const e=document.getElementById("test-modal"),n=document.getElementById("test-modal-title");if(t){n.textContent="Edit Test";const s=O(t);document.getElementById("test-name").value=s.name||"",document.getElementById("test-start-date").value=s.startDate||"",document.getElementById("test-end-date").value=s.endDate||"",document.getElementById("test-tester").value=s.tester||"",document.getElementById("test-status").value=s.status,document.getElementById("test-notes").value=s.notes||""}else{n.textContent="Create New Test";const s=document.getElementById("test-form");s&&s.reset()}e==null||e.classList.add("active")}function k(){var t;(t=document.getElementById("test-modal"))==null||t.classList.remove("active"),x=null}function F(t){S=t;const e=document.getElementById("complete-modal"),n=O(t),s=new Date().toISOString().split("T")[0],o=document.getElementById("complete-end-date");o&&(o.value=n.endDate||s);const a=document.getElementById("complete-results");a&&(a.value=n.results||""),e==null||e.classList.add("active")}function M(){var t;(t=document.getElementById("complete-modal"))==null||t.classList.remove("active"),S=null}function A(t){var o,a,r,c,m,l,i,h,d,f;const e=t.closest(".bg-wellness-white"),n=[],s=e==null?void 0:e.querySelectorAll(".flex.gap-2.mt-1 img");return s==null||s.forEach(w=>{n.push({name:w.alt||"Screenshot",data:w.src})}),{name:((a=(o=e==null?void 0:e.querySelector("h3"))==null?void 0:o.textContent)==null?void 0:a.trim())||"",element:((c=(r=e==null?void 0:e.querySelector(".grid > div:nth-child(1) p"))==null?void 0:r.textContent)==null?void 0:c.trim())||"",reasoning:((l=(m=e==null?void 0:e.querySelector(".grid > div:nth-child(2) p"))==null?void 0:m.textContent)==null?void 0:l.trim())||"",howto:((h=(i=e==null?void 0:e.querySelector(".grid > div:nth-child(3) p"))==null?void 0:i.textContent)==null?void 0:h.trim())||"",success:((f=(d=e==null?void 0:e.querySelector(".mt-2 p"))==null?void 0:d.textContent)==null?void 0:f.trim())||"",screenshots:n}}function O(t){var n,s,o,a,r,c,m,l,i,h,d,f;const e=t.closest(".bg-white");return{name:((s=(n=e==null?void 0:e.querySelector("h3"))==null?void 0:n.textContent)==null?void 0:s.trim())||"",startDate:((a=(o=e==null?void 0:e.querySelector(".grid > div:nth-child(1) p"))==null?void 0:o.textContent)==null?void 0:a.trim())||"",endDate:((c=(r=e==null?void 0:e.querySelector(".grid > div:nth-child(2) p"))==null?void 0:r.textContent)==null?void 0:c.trim())||"",tester:((l=(m=e==null?void 0:e.querySelector(".grid > div:nth-child(3) p"))==null?void 0:m.textContent)==null?void 0:l.trim())||"",status:e!=null&&e.querySelector(".inline-block.bg-yellow-100")?"in-progress":e!=null&&e.querySelector(".inline-block.bg-green-100")?"completed":"planned",notes:((h=(i=e==null?void 0:e.querySelector(".mb-4 p"))==null?void 0:i.textContent)==null?void 0:h.trim())||"",results:((f=(d=e==null?void 0:e.querySelector(".mb-4 p"))==null?void 0:d.textContent)==null?void 0:f.trim())||""}}function H(t){const e=document.getElementById("ideas-list"),n=document.createElement("div");n.className="bg-wellness-white rounded-lg p-4 border-l-4 border-potent-purple shadow-sm",t.id&&(n.dataset.id=t.id);let s="";return t.screenshots&&t.screenshots.length&&(s='<div class="mt-2 idea-screenshots"><span class="font-medium text-mindful-midnight text-sm">Screenshots:</span><div class="flex gap-2 mt-1">',t.screenshots.forEach(o=>{s+=`<img src="${o.data}" alt="${o.name}" class="w-20 h-16 object-cover rounded cursor-pointer hover:opacity-80" onclick="enlargeImage('${o.data}', '${o.name}')">`}),s+="</div></div>"),n.innerHTML=`
      <div class="flex justify-between items-start mb-2">
        <h3 class="font-semibold text-mindful-midnight">${t.name}</h3>
        <div class="flex gap-2">
          <button onclick="editIdea(this)" class="text-potent-purple hover:text-darker-violet text-sm">‚úèÔ∏è Edit</button>
          <button onclick="createTestFromIdea(this)" class="text-black hover:text-vitality-violet text-sm">üß™ Create Test</button>
          <button onclick="deleteIdea(this)" class="text-red-600 hover:text-red-800 text-sm">üóëÔ∏è Delete</button>
        </div>
      </div>
      <div class="grid md:grid-cols-3 gap-4 text-sm">
        <div>
          <span class="font-medium text-mindful-midnight">Element:</span>
          <p class="text-gray-700">${t.element}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">Reasoning:</span>
          <p class="text-gray-700">${t.reasoning}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">How to Test:</span>
          <p class="text-gray-700">${t.howto}</p>
        </div>
      </div>
      <div class="mt-2">
        <span class="font-medium text-mindful-midnight text-sm">Success Criteria:</span>
        <p class="text-gray-700 text-sm">${t.success}</p>
      </div>${s}`,e==null||e.prepend(n),n}function G(t){p(t.closest(".bg-wellness-white"))}function K(t){var e;(e=t.closest(".bg-wellness-white"))==null||e.remove()}function V(t){const e=A(t.closest(".bg-wellness-white"));E=t.closest(".bg-wellness-white"),L();const n=document.getElementById("test-name"),s=document.getElementById("test-notes");n&&(n.value=e.name),s&&(s.value=`Created from idea: ${e.reasoning}`),window.pendingScreenshots=e.screenshots}async function R(t){const e=document.getElementById("tests-list"),n=document.createElement("div");n.className="bg-white rounded-lg p-6 border shadow-sm border-l-4 border-vitality-violet";let s="";t.screenshots&&t.screenshots.length&&(s='<div class="bg-wellness-white p-3 rounded mt-4"><span class="font-medium text-mindful-midnight text-sm">Screenshots:</span><div class="flex gap-2 mt-2">',t.screenshots.forEach(o=>{s+=`<img src="${o.data}" alt="${o.name}" class="w-20 h-16 object-cover rounded">`}),s+="</div></div>"),n.innerHTML=`
      <div class="flex justify-between items-start mb-4">
        <div>
          <h3 class="font-semibold text-mindful-midnight text-lg">${t.name}</h3>
          <span class="inline-block bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-sm font-medium">In Progress</span>
        </div>
        <div class="flex gap-2">
          <button onclick="editTest(this)" class="text-potent-purple hover:text-darker-violet text-sm">‚úèÔ∏è Edit</button>
          <button onclick="completeTest(this)" class="text-tenacious-turquoise hover:text-vitality-violet text-sm">‚úÖ Complete</button>
          <button onclick="deleteTest(this)" class="text-red-600 hover:text-red-800 text-sm">üóëÔ∏è Delete</button>
        </div>
      </div>
      <div class="grid md:grid-cols-3 gap-4 mb-4">
        <div>
          <span class="font-medium text-mindful-midnight">Start Date:</span>
          <p class="text-gray-700">${t.startDate}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">Expected End:</span>
          <p class="text-gray-700">${t.endDate}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">Tester:</span>
          <p class="text-gray-700">${t.tester}</p>
        </div>
      </div>
      <div class="mb-4">
        <span class="font-medium text-mindful-midnight">Notes:</span>
        <p class="text-gray-700">${t.notes}</p>
      </div>
      <div class="bg-wellness-white p-3 rounded">
        <span class="font-medium text-mindful-midnight text-sm">Screenshots:</span>
        <div class="mt-2 flex gap-2">
          ${t.screenshots&&t.screenshots.length?t.screenshots.map(o=>`<img src="${o.data}" alt="${o.name}" class="w-20 h-16 object-cover rounded cursor-pointer hover:opacity-80" onclick="enlargeImage('${o.data}', '${o.name}')">`).join(""):`
          <div class="bg-fearless-fuchsia/20 w-20 h-16 rounded flex items-center justify-center text-xs text-mindful-midnight">üì± Mobile</div>
          <div class="bg-fearless-fuchsia/20 w-20 h-16 rounded flex items-center justify-center text-xs text-mindful-midnight">üíª Desktop</div>
          `}
        </div>
      </div>`,e==null||e.prepend(n)}function Q(t){L(t.closest(".bg-white"))}function X(t){var e;(e=t.closest(".bg-white"))==null||e.remove()}function Y(t){F(t.closest(".bg-white"))}function Z(t){var n;const e=t.closest(".bg-white");alert("Displaying test results for: "+(((n=e==null?void 0:e.querySelector("h3"))==null?void 0:n.textContent)||""))}function P(t,e){const n=document.createElement("div");n.className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50",n.innerHTML=`
      <div class="relative max-w-4xl max-h-screen p-4">
        <img src="${t}" alt="${e}" class="max-w-full max-h-full object-contain">
        <button onclick="this.parentElement.parentElement.remove()" class="absolute top-2 right-2 bg-white rounded-full w-8 h-8 flex items-center justify-center text-black hover:bg-gray-200">√ó</button>
      </div>
    `,n.onclick=s=>{s.target===n&&n.remove()},document.body.appendChild(n)}function $(t){return Promise.all(Array.from(t).map(e=>new Promise(n=>{const s=new FileReader;s.onload=()=>n({name:e.name,data:s.result}),s.readAsDataURL(e)})))}function _(t,{maxEdge:e=800,quality:n=.7}={}){return new Promise(s=>{const o=new Image;o.onload=()=>{let{width:a,height:r}=o;const c=Math.min(1,e/Math.max(a,r)),m=Math.round(a*c),l=Math.round(r*c),i=document.createElement("canvas");i.width=m,i.height=l,i.getContext("2d").drawImage(o,0,0,m,l);const d=i.toDataURL("image/jpeg",n);s(d)},o.onerror=()=>s(t),o.src=t})}async function q(t){try{const e=JSON.stringify(t),n=39e3;if(e.length<=n)return e;if(!t.length)return"";const s=t[0],o=[.7,.55,.4,.3,.2],a=[800,700,600,500,400];for(const r of a)for(const c of o){const m=await _(s.data,{maxEdge:r,quality:c}),l=JSON.stringify([{name:s.name,data:m}]);if(l.length<=n)return l}return""}catch(e){return console.warn("Failed to fit screenshots for sheet:",e),""}}function ee(t){const e=t.split(`
`),n={element:"",reasoning:"",howto:"",success:""};return e.forEach(s=>{s.startsWith("Element: ")?n.element=s.substring(9).trim():s.startsWith("Reasoning: ")?n.reasoning=s.substring(11).trim():s.startsWith("How to Test: ")?n.howto=s.substring(13).trim():s.startsWith("Success Criteria: ")&&(n.success=s.substring(18).trim())}),n}async function te(){const t=document.getElementById("ideas-list");t&&(t.innerHTML='<div class="text-gray-500">Loading ideas‚Ä¶</div>');try{console.log("[Dashboard] Fetching /api/ideas");const e=await fetch("/api/ideas",{cache:"no-store",headers:{Accept:"application/json"}});if(!e.ok)throw new Error("Failed to fetch ideas");const n=await e.json();if(console.log("[Dashboard] Ideas response",n),!Array.isArray(n)||n.length===0){if(t){const s=document.createElement("div");s.className="text-gray-500",s.textContent="No ideas yet. Add your first idea!",t.appendChild(s)}return}t&&(t.innerHTML="");for(const s of n.filter(o=>o.title&&o.title.trim())){const o=ee(s.description);let a=[];if(s.screenshots)try{s.screenshots.endsWith("...[truncated]")?(console.warn("Screenshots data was truncated due to size limits"),a=[{name:"Screenshot (truncated)",data:""}]):a=JSON.parse(s.screenshots)}catch(c){console.warn("Failed to parse screenshots for idea:",s.title,c)}const r={id:s.id,name:s.title||"Untitled",element:o.element,reasoning:o.reasoning,howto:o.howto,success:o.success,screenshots:a};H(r)}}catch(e){if(console.error("Failed loading ideas:",e),t){const n=document.createElement("div");n.className="text-red-600",n.textContent="Failed to load ideas from the server.",t.appendChild(n)}}}async function se(){const t=document.getElementById("tests-list");t&&(t.innerHTML='<div class="text-gray-500">Loading active tests‚Ä¶</div>');try{console.log("[Dashboard] Fetching /api/tests");const e=await fetch("/api/tests",{cache:"no-store",headers:{Accept:"application/json"}});if(!e.ok)throw new Error("Failed to fetch active tests");const n=await e.json();if(console.log("[Dashboard] Active tests response",n),!Array.isArray(n)||n.length===0){if(t){const s=document.createElement("div");s.className="text-gray-500",s.textContent="No active tests.",t.appendChild(s)}return}t&&(t.innerHTML="");for(const s of n.filter(o=>o.Name&&o.Name.trim())){let o=[];if(s.Screenshots)try{s.Screenshots.endsWith("...[truncated]")?(console.warn("Screenshots data was truncated due to size limits"),o=[{name:"Screenshot (truncated)",data:""}]):o=JSON.parse(s.Screenshots)}catch(r){console.warn("Failed to parse screenshots for test:",s.Name,r)}const a={name:s.Name||"Untitled Test",startDate:s["Start Date"]||"",endDate:s["Expected End Date"]||"",tester:s.Tester||"",notes:s.Notes||"",screenshots:o};R(a)}}catch(e){if(console.error("Failed loading active tests:",e),t){const n=document.createElement("div");n.className="text-red-600",n.textContent="Failed to load active tests from the server.",t.appendChild(n)}}}function ne(t){const e=document.getElementById("completed-list"),n=document.createElement("div");n.className="bg-white rounded-lg p-6 border shadow-sm border-l-4 border-green-500",n.innerHTML=`
      <div class="flex justify-between items-start mb-4">
        <div>
          <h3 class="font-semibold text-mindful-midnight text-lg">${t.name}</h3>
          <div class="flex gap-2 mt-1">
            <span class="inline-block bg-green-100 text-green-800 px-2 py-1 rounded text-sm font-medium">${t.result||"Completed"}</span>
            <span class="inline-block bg-gray-100 text-gray-700 px-2 py-1 rounded text-sm">Completed</span>
          </div>
        </div>
        <div class="flex gap-2">
          <button onclick="viewTestResults(this)" class="text-potent-purple hover:text-darker-violet text-sm">üìä View Results</button>
          <button onclick="deleteTest(this)" class="text-red-600 hover:text-red-800 text-sm">üóëÔ∏è Delete</button>
        </div>
      </div>
      <div class="grid md:grid-cols-4 gap-4 mb-4">
        <div>
          <span class="font-medium text-mindful-midnight">Start Date:</span>
          <p class="text-gray-700">${t.startDate||""}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">End Date:</span>
          <p class="text-gray-700">${t.endDate||""}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">Duration:</span>
          <p class="text-gray-700">${t.duration||""}</p>
        </div>
        <div>
          <span class="font-medium text-mindful-midnight">Tester:</span>
          <p class="text-gray-700">${t.tester||""}</p>
        </div>
      </div>
      <div class="mb-4">
        <span class="font-medium text-mindful-midnight">Test Results:</span>
        <p class="text-gray-700">${t.results||""}</p>
      </div>
      ${t.screenshots&&t.screenshots.length?`
      <div class="bg-wellness-white p-3 rounded">
        <span class="font-medium text-mindful-midnight text-sm">Screenshots:</span>
        <div class="mt-2 flex gap-2">
          ${t.screenshots.map(s=>`<img src="${s.data}" alt="${s.name}" class="w-20 h-16 object-cover rounded cursor-pointer hover:opacity-80" onclick="enlargeImage('${s.data}', '${s.name}')">`).join("")}
        </div>
      </div>`:""}`,e==null||e.appendChild(n)}async function oe(){const t=document.getElementById("completed-list");t&&(t.innerHTML='<div class="text-gray-500">Loading completed tests‚Ä¶</div>');try{console.log("[Dashboard] Fetching /api/tests?status=completed");const e=await fetch("/api/tests?status=completed",{cache:"no-store",headers:{Accept:"application/json"}});if(!e.ok)throw new Error("Failed to fetch completed tests");const n=await e.json();if(console.log("[Dashboard] Completed tests response",n),!Array.isArray(n)||n.length===0){if(t){const s=document.createElement("div");s.className="text-gray-500",s.textContent="No completed tests.",t.appendChild(s)}return}t&&(t.innerHTML="");for(const s of n.filter(o=>o.Name&&o.Name.trim())){let o=[];if(s.Screenshots)try{s.Screenshots.endsWith("...[truncated]")?(console.warn("Screenshots data was truncated due to size limits"),o=[{name:"Screenshot (truncated)",data:""}]):o=JSON.parse(s.Screenshots)}catch(r){console.warn("Failed to parse screenshots for completed test:",s.Name,r)}const a={name:s.Name||"Untitled Test",startDate:s["Start Date"]||"",endDate:s["End Date"]||"",tester:s.Tester||"",result:s.Result||"Completed",results:s.Results||"",screenshots:o};ne(a)}}catch(e){if(console.error("Failed loading completed tests:",e),t){const n=document.createElement("div");n.className="text-red-600",n.textContent="Failed to load completed tests from the server.",t.appendChild(n)}}}(J=document.getElementById("idea-form"))==null||J.addEventListener("submit",async t=>{var c,m,l,i,h,d,f,w;t.preventDefault();const e=document.getElementById("idea-screenshots"),n=(e==null?void 0:e.files)||[];let s=await $(n);s.length===0&&window.pendingIdeaScreenshots&&y&&(s=window.pendingIdeaScreenshots);const o={name:(c=document.getElementById("idea-name"))==null?void 0:c.value.trim(),submitter:(m=document.getElementById("idea-submitter"))==null?void 0:m.value.trim(),element:(l=document.getElementById("idea-element"))==null?void 0:l.value.trim(),reasoning:(i=document.getElementById("idea-reasoning"))==null?void 0:i.value.trim(),howto:(h=document.getElementById("idea-howto"))==null?void 0:h.value.trim(),success:(d=document.getElementById("idea-success"))==null?void 0:d.value.trim(),screenshots:s},a=[o.element&&`Element: ${o.element}`,o.reasoning&&`Reasoning: ${o.reasoning}`,o.howto&&`How to Test: ${o.howto}`,o.success&&`Success Criteria: ${o.success}`].filter(Boolean).join(`
`),r=o.screenshots.length?await q(o.screenshots):"";try{const C=!!y,B="/api/ideas",b=C?"PUT":"POST",z={title:o.name,description:a,screenshots:r,submittedBy:o.submitter||void 0};if(C){const g=(w=(f=y.closest(".bg-wellness-white"))==null?void 0:f.dataset)==null?void 0:w.id;g&&(z.id=g)}const N=await fetch(B,{method:b,headers:{"Content-Type":"application/json"},body:JSON.stringify(z)});if(!N.ok){const g=await N.json().catch(()=>({}));throw new Error(g.error||"Failed to save idea")}const j=await N.json().catch(()=>({}));if(y){const g=y.closest(".bg-wellness-white");g.querySelector("h3").textContent=o.name,g.querySelector(".grid > div:nth-child(1) p").textContent=o.element,g.querySelector(".grid > div:nth-child(2) p").textContent=o.reasoning,g.querySelector(".grid > div:nth-child(3) p").textContent=o.howto,g.querySelector(".mt-2 p").textContent=o.success;let D=g.querySelector(".idea-screenshots .flex.gap-2");if(!D&&o.screenshots.length){const v=document.createElement("div");v.className="mt-2 idea-screenshots",v.innerHTML='<span class="font-medium text-mindful-midnight text-sm">Screenshots:</span><div class="flex gap-2 mt-1"></div>',g.appendChild(v),D=v.querySelector(".flex.gap-2")}D&&(D.innerHTML="",o.screenshots.forEach(v=>{const T=document.createElement("img");T.src=v.data,T.alt=v.name,T.className="w-20 h-16 object-cover rounded cursor-pointer hover:opacity-80",T.onclick=()=>P(v.data,v.name),D.appendChild(T)}))}else{const g=H(o);j&&j.id&&(g.dataset.id=j.id)}window.pendingIdeaScreenshots=[],I()}catch(C){console.error("Save idea failed:",C),alert("Failed to save idea to Google Sheet. Please try again.")}}),(W=document.getElementById("test-form"))==null||W.addEventListener("submit",async t=>{var a,r,c,m,l,i;t.preventDefault();const e=document.getElementById("test-screenshots"),n=(e==null?void 0:e.files)||[];let s=await $(n);s.length===0&&window.pendingScreenshots&&(s=window.pendingScreenshots);const o={name:(a=document.getElementById("test-name"))==null?void 0:a.value,startDate:(r=document.getElementById("test-start-date"))==null?void 0:r.value,endDate:(c=document.getElementById("test-end-date"))==null?void 0:c.value,tester:(m=document.getElementById("test-tester"))==null?void 0:m.value,status:(l=document.getElementById("test-status"))==null?void 0:l.value,notes:(i=document.getElementById("test-notes"))==null?void 0:i.value,screenshots:s};try{const h=await fetch("/api/tests",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:o.name,startDate:o.startDate,expectedEndDate:o.endDate,tester:o.tester,status:o.status,notes:o.notes,screenshots:o.screenshots.length?await q(o.screenshots):""})});if(!h.ok){const d=await h.json().catch(()=>({}));throw new Error(d.error||"Failed to save test")}if(x){const d=x.closest(".bg-white");d.querySelector("h3").textContent=o.name,d.querySelector(".grid > div:nth-child(1) p").textContent=o.startDate,d.querySelector(".grid > div:nth-child(2) p").textContent=o.endDate,d.querySelector(".grid > div:nth-child(3) p").textContent=o.tester,d.querySelector(".mb-4 p").textContent=o.notes}else R(o);E&&(E.remove(),E=null),window.pendingScreenshots=null,k()}catch(h){console.error("Save test failed:",h),alert("Failed to save test to Google Sheet.")}}),(U=document.getElementById("complete-form"))==null||U.addEventListener("submit",async t=>{var o,a,r,c,m,l;t.preventDefault();const e=(o=document.getElementById("complete-result"))==null?void 0:o.value,n=(a=document.getElementById("complete-end-date"))==null?void 0:a.value,s=(r=document.getElementById("complete-results"))==null?void 0:r.value;if(S){const i=S.closest(".bg-white"),h=i.querySelector(".inline-block.bg-yellow-100");h&&h.remove();const d=document.createElement("span");d.className=e==="passed"?"inline-block bg-green-100 text-green-800 px-2 py-1 rounded text-sm font-medium":"inline-block bg-red-100 text-red-800 px-2 py-1 rounded text-sm font-medium",d.textContent=e==="passed"?"‚úÖ Passed":"‚ùå Failed",i.querySelector(".flex.gap-2").before(d),i.querySelector(".grid > div:nth-child(2) p").textContent=n;const f=document.createElement("div");f.className="mb-4",f.innerHTML=`
        <span class="font-medium text-mindful-midnight">Test Results:</span>
        <p class="text-gray-700">${s}</p>`;const w=i.querySelector(".mb-4:last-child");w?w.replaceWith(f):i.appendChild(f);const C=i.querySelectorAll(".flex.gap-2 img"),B=Array.from(C).map(b=>({name:b.alt||"Screenshot",data:b.src}));try{const b=B.length?await q(B):"";await fetch("/api/complete-test",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:(c=i.querySelector("h3"))==null?void 0:c.textContent,startDate:(m=i.querySelector(".grid > div:nth-child(1) p"))==null?void 0:m.textContent,endDate:n,tester:(l=i.querySelector(".grid > div:nth-child(3) p"))==null?void 0:l.textContent,result:e==="passed"?"Passed":"Failed",results:s,screenshots:b})})}catch(b){console.error("Record completion failed:",b)}}M()}),document.addEventListener("DOMContentLoaded",()=>{te(),se(),oe()}),Object.assign(window,{switchTab:u,openIdeaModal:p,closeIdeaModal:I,openTestModal:L,closeTestModal:k,openCompleteModal:F,closeCompleteModal:M,editIdea:G,deleteIdea:K,createTestFromIdea:V,editTest:Q,deleteTest:X,completeTest:Y,viewTestResults:Z,enlargeImage:P,readFilesAsDataURLs:$})})();
